// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String      @id @unique @default(uuid())
  name      String      
  username  String      @unique
  password  String
  createdAt DateTime    @default(now())
}

model Product {
  id            String            @id @unique @default(uuid())
  images        ProductImage[]
  name          String
  description   String            @db.Text
  variants      ProductVariant[]
  visibility    Visibility        @default(public)
  createdAt     DateTime          @default(now())
}

enum Visibility {
  public
  private
}

model ProductImage {
  id            String      @id @unique @default(uuid())
  productId     String
  name          String

  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductVariant {
  id              String            @id @unique @default(uuid())
  productId       String
  color           String
  length          Float
  width           Float
  height          Float
  stock           Int
  price           Int
  orderProducts   OrderProduct[]

  product         Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id                String          @id @unique @default(uuid())
  trackingReceipt   String
  orderProducts     OrderProduct[]
  name              String
  phone             String
  shippingFee       Int
  discount          Int?
  address           OrderAddress?
  shippingMethod    String
  paymentMethod     String
  additionalNotes   String?
  status            Status          @default(belum_bayar)
  createdAt         DateTime        @default(now())
}

enum Status {
  belum_bayar
  sedang_dikemas
  dikirim
  selesai
  dibatalkan
}

model OrderProduct {
  id              String              @id @unique @default(uuid())
  orderId         String
  variantId       String
  quantity        Int

  order           Order               @relation(fields: [orderId], references: [id])
  productVariant  ProductVariant      @relation(fields: [variantId], references: [id])
}

model OrderAddress {
  id            String    @id @unique @default(uuid())
  orderId       String    @unique
  country       String
  address       String
  otherDetails  String?
  province      String
  city          String
  postalCode    String

  order         Order     @relation(fields: [orderId], references: [id])
}

model Expense {
  id          String      @id @unique @default(uuid())
  name        String
  price       Int
  createdAt   DateTime    @default(now())
}

model Tailor {
  id                String              @id @unique @default(uuid())
  name              String
  available         Boolean             @default(false)
  createdAt         DateTime            @default(now())
  productCreation   ProductCreation[]
}

model Material {
  id                          String                        @id @unique @default(uuid())
  name                        String                        @unique
  complexity                  Float
  cuttingTime                 Float
  sewingTime                  Float
  productCreationMaterial     ProductCreationMaterial[]
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
}

model ProductCreation {
  id              String                      @id @unique @default(uuid())
  name            String 
  tailorId        String
  materials       ProductCreationMaterial[]    
  startDate       DateTime                    @default(now())
  estimationTime  DateTime
  status          productionStatus
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt

  tailor          Tailor                      @relation(fields: [tailorId], references: [id])
}

enum productionStatus {
  belum_dimulai
  dalam_proses
  selesai
}

model ProductCreationMaterial {
  id                    String              @id @unique @default(uuid())
  productCreationId     String
  materialId            String
  quantity              Int
  size                  Float
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  productCreation       ProductCreation     @relation(fields: [productCreationId], references: [id])
  material              Material            @relation(fields: [materialId], references: [id])
}